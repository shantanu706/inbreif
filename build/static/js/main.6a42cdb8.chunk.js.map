{"version":3,"sources":["InBRE.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","value","setValue","event","setEvent","Pending","setPending","Title","Text","url","ImageURL","QuickSearch","Array","Results","SetResults","Search","a","setTimeout","axios","get","then","res","data","catch","err","alert","className","src","logo","alt","type","onChange","e","target","onClick","style","color","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,mC,2OCqF5BC,MAhFf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEaF,oBAAS,GAFtB,mBAENG,EAFM,KAECC,EAFD,OAGiBJ,oBAAS,GAH1B,mBAGNK,EAHM,KAGGC,EAHH,OAIiBN,mBAAS,CACrCO,MAAO,OACPC,KAAM,GACNC,IAAK,qCACLC,SAAU,qCACVC,YAAaC,MAAM,KATR,mBAINC,EAJM,KAIGC,EAJH,KA4BPC,EAAM,uCAAG,sBAAAC,EAAA,sDACC,OAAVf,IACFG,GAAS,GACTE,GAAW,GACXW,YAAW,WACTC,IACGC,IAAI,aAAelB,GACnBmB,MAAK,SAACC,GACLP,EAAWO,EAAIC,MACfL,YAAW,WACTb,GAAS,GACTE,GAAW,KACV,QAEJiB,OAAM,SAACC,GACNC,MAAM,0BAA4BD,KACjC,OAhBI,2CAAH,qDAqBZ,OACE,yBAAKE,UAAU,OACb,wBAAIA,UAAU,YACZ,yBAAKC,IAAKC,IAAMC,IAAI,UAEtB,gCACE,2BACEC,KAAK,OACLJ,UAAU,YACVzB,MAAOA,EACP8B,SA/Ca,SAACC,GACpB9B,EAAS8B,EAAEC,OAAOhC,UAgDd,4BAAQiC,QAASnB,EAAQW,UAAU,OAAnC,UAGCvB,GAAS,uBAAGgC,MAAO,CAAEC,MAAO,SAAnB,cACT/B,GACC,yBAAKqB,UAAU,WACb,yBAAKC,IAAKd,EAAQH,SAAUmB,IAAI,GAAGH,UAAU,eAC7C,4BACE,2BAAIb,EAAQN,MAAZ,MAEF,4BAAKM,EAAQL,MACb,uBAAG6B,KAAMxB,EAAQJ,KAAjB,iBCjEQ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEd7B,OAAM,SAAA8B,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6a42cdb8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/InBRE.da63e1fe.png\";","import React, { useState } from \"react\";\nimport logo from \"./InBRE.png\";\nimport \"./App.css\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [value, setValue] = useState('');\n  const [event, setEvent] = useState(false);\n  const [Pending, setPending] = useState(false);\n  const [Results, SetResults] = useState({\n    Title: \"Null\",\n    Text: \"\",\n    url: \"https://en.wikipedia.org/wiki/Null\",\n    ImageURL: \"https://en.wikipedia.org/wiki/Null\",\n    QuickSearch: Array(8),\n  });\n\n  const HandleChange = (e) => {\n    setValue(e.target.value);\n    // if (value !== null) {\n    //   setSearchQuery(value);\n    //   console.log(SearchQuery);\n    //   await axios\n    //     .get(\"/q?search=\" + SearchQuery)\n    //     .then((res) => {\n    //       SetResults(res.data);\n    //     })\n    //     .catch((err) => {\n    //       alert(\"Something Fishy Error!!\" + err);\n    //     });\n    // }\n  };\n\n  const Search = async () => {\n    if (value !== null) {\n      setEvent(true);\n      setPending(false);\n      setTimeout(() => {\n        axios\n          .get(\"/q?search=\" + value)\n          .then((res) => {\n            SetResults(res.data);\n            setTimeout(() => {\n              setEvent(false);\n              setPending(true);\n            }, 3000);\n          })\n          .catch((err) => {\n            alert(\"Something Fishy Error!!\" + err);\n          }, 0);\n      });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"App-logo\">\n        <img src={logo} alt=\"logo\" />\n      </h1>\n      <center>\n        <input\n          type=\"text\"\n          className=\"css-input\"\n          value={value}\n          onChange={HandleChange}\n        />\n        <button onClick={Search} className=\"btn\">\n          Search\n        </button>\n        {event && <p style={{ color: \"#FFF\" }}>Loading...</p>}\n        {Pending && (\n          <div className=\"InfoBox\">\n            <img src={Results.ImageURL} alt=\"\" className=\"HeadingImg\" />\n            <h2>\n              <b>{Results.Title} </b>\n            </h2>\n            <h4>{Results.Text}</h4>\n            <a href={Results.url}>wikipedia</a>\n          </div>\n        )}\n      </center>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}